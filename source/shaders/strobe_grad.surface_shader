<shader>
	
	<inputs>
		<input name="albedoMap" type="texture" address="wrap" srgb="true"/>
		<input name="emissiveMap" type="texture" address="wrap" srgb="true"/>
		<input name="scrollingMask" type="texture" address="wrap" srgb="true"/>
        <input name="normalMap" type="texture" address="wrap" srgb="true"/>
        <input name="specularMap" type="texture" address="wrap" srgb="true"/>
	</inputs>
	
	<params>
		<param name="osPosition">true</param>
		<param name="wsPosition">true</param>
		<param name="wsNormal">true</param>
		<param name="vsNormal">true</param>
		<param name="twoSided">true</param>		
	</params>
	
	<code>
	<![CDATA[
		
		float3 DecodeNormal(const float4 texNormal)
		{
			float4 n = texNormal * 2 - 1;
			//return float3(n.a, n.g, sqrt(1 - dot(n.ag, n.ag)) );
			return n.xyz;
		}
		
		void MaterialShader(in Material_Input input, inout Material material)
		{
			
			float4 albedo = tex2D(albedoMap, input.texCoord);
			float3 mask = tex2D(scrollingMask, input.texCoord).rgb;
			float4 specularGloss = tex2D(specularMap, input.texCoord);
			float2 movement = input.texCoord + float2(0, time * -0.75);
			
			material.albedo    = DecodeNormal( tex2D(albedoMap, input.texCoord) );
			material.emissive  = tex2D(emissiveMap, movement) * mask;
			material.tsNormal  = DecodeNormal( tex2D(normalMap, input.texCoord) );
			material.specular  = specularGloss.rgb;
		}
	]]>
	</code>

</shader>
